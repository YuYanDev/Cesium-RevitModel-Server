<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Threejs Gltf</title>
</head>

<body>
        <div id="container"></div>
        
        <script src="/static/three.js/build/three.js"></script>
        <script src="/static/three.js/examples/js/controls/OrbitControls.js"></script>
		<script src="/static/three.js/examples/js/loaders/GLTFLoader.js"></script>

		<script src="/static/three.js/examples/js/WebGL.js"></script>
		<script src="/static/three.js/examples/js/libs/stats.min.js"></script>
    <script>
    //     var camera, scene, renderer;

    //     var container = document.querySelector('#container');
    //     var loader = new THREE.GLTFLoader();

    //     THREE.DRACOLoader.setDecoderPath('/static/three.js/examples/js/libs/draco');
    //     loader.setDRACOLoader(new THREE.DRACOLoader());

    //     init();
    //     animate();

    //     function init() {
    //         camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 0.1, 15);
    //         camera.position.set(3, 0.25, 3);

    //         scene = new THREE.Scene();
    //         scene.background = new THREE.Color(0x443333);
    //         scene.fog = new THREE.Fog(0x443333, 1, 4);

    //         // Ground
    //         var plane = new THREE.Mesh(
    //             new THREE.PlaneBufferGeometry(8, 8),
    //             new THREE.MeshPhongMaterial({ color: 0x999999, specular: 0x101010 })
    //         );
    //         plane.rotation.x = - Math.PI / 2;
    //         plane.position.y = 0.03;
    //         plane.receiveShadow = true;
    //         scene.add(plane);

    //         // Lights
    //         var light = new THREE.HemisphereLight(0x443333, 0x111122);
    //         scene.add(light);

    //         var light = new THREE.SpotLight();
    //         light.angle = Math.PI / 16;
    //         light.penumbra = 0.5;
    //         light.castShadow = true;
    //         light.position.set(- 1, 1, 1);
    //         scene.add(light);
    //         // Load a glTF resource
    //         loader.load(
    //             // resource URL
    //             '/model/JHQAutoQualityNoDracoNoExtractionShell/JHQAutoQualityNoDracoNoExtractionShell.gltf',
    //             // called when the resource is loaded
    //             function (gltf) {

    //                 scene.add(gltf.scene);

    //                 gltf.animations; // Array<THREE.AnimationClip>
    //                 gltf.scene; // THREE.Scene
    //                 gltf.scenes; // Array<THREE.Scene>
    //                 gltf.cameras; // Array<THREE.Camera>
    //                 gltf.asset; // Object

    //             },
    //             // called while loading is progressing
    //             function (xhr) {

    //                 console.log((xhr.loaded / xhr.total * 100) + '% loaded');

    //             },
    //             // called when loading has errors
    //             function (error) {

    //                 console.log('An error happened');

    //             }
    //         );
    //     }
    //     function onWindowResize() {

    //         camera.aspect = window.innerWidth / window.innerHeight;
    //         camera.updateProjectionMatrix();

    //         renderer.setSize(window.innerWidth, window.innerHeight);

    //     }

    //     function animate() {

    //         render();
    //         requestAnimationFrame(animate);

    //     }

    //     function render() {

    //         var timer = Date.now() * 0.0003;

    //         camera.position.x = Math.sin(timer) * 0.5;
    //         camera.position.z = Math.cos(timer) * 0.5;
    //         camera.lookAt(0, 0.1, 0);

    //         renderer.render(scene, camera);

    //     }    
    //

if ( WEBGL.isWebGLAvailable() === false ) {

    document.body.appendChild( WEBGL.getWebGLErrorMessage() );

}

var container, stats, controls;
var camera, scene, renderer, light;

init();
animate();

function init() {

    container = document.createElement( 'div' );
    document.body.appendChild( container );

    camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.25, 20 );
    camera.position.set( - 1.8, 0.9, 2.7 );

    controls = new THREE.OrbitControls( camera );
    controls.target.set( 0, - 0.2, - 0.2 );
    controls.update();

    // var urls = [ 'posx.jpg', 'negx.jpg', 'posy.jpg', 'negy.jpg', 'posz.jpg', 'negz.jpg' ];
    // var loader = new THREE.CubeTextureLoader().setPath( 'textures/cube/Bridge2/' );
    var background = new THREE.Color(0x999999);

    scene = new THREE.Scene();
    scene.background = background ;

    light = new THREE.HemisphereLight( 0xbbbbff, 0x444422 );
    light.position.set( 0, 1, 0 );
    scene.add( light );

    // model
    var loader = new THREE.GLTFLoader().setPath( '/model/JHQLowQualityNoDracoNoExtractionShell/' );
    loader.load( 'JHQLowQualityNoDracoNoExtractionShell.gltf', function ( gltf ) {

        gltf.scene.traverse( function ( child ) {

            if ( child.isMesh ) {

                child.material.envMap = background;

            }

        } );

        scene.add( gltf.scene );

    }, undefined, function ( e ) {

        console.error( e );

    } );

    renderer = new THREE.WebGLRenderer( { antialias: true } );
    renderer.setPixelRatio( window.devicePixelRatio );
    renderer.setSize( window.innerWidth, window.innerHeight );
    renderer.gammaOutput = true;
    container.appendChild( renderer.domElement );

    window.addEventListener( 'resize', onWindowResize, false );

    // stats
    stats = new Stats();
    container.appendChild( stats.dom );

}

function onWindowResize() {

    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();

    renderer.setSize( window.innerWidth, window.innerHeight );

}

//

function animate() {

    requestAnimationFrame( animate );

    renderer.render( scene, camera );

    stats.update();

}

    
    
    
    </script>
</body>

</html>